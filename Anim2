import android.util.Log
import androidx.compose.animation.core.animateDp
import androidx.compose.animation.core.updateTransition
import androidx.compose.foundation.clickable
import androidx.compose.animation.*
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.Transition
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.animateIntOffset
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Place
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.IntSize

val tween1 = spring<Dp>(dampingRatio = Spring.DampingRatioNoBouncy, stiffness = Spring.StiffnessLow)
val tween2 = spring<Float>(dampingRatio = Spring.DampingRatioNoBouncy, stiffness = Spring.StiffnessLow)
val tween3 = tween<IntSize>(3500)

@Composable
fun ExpandableView(isExpanded: Boolean = false) {
    //val backgroundImage: Painter = painterResource(id = R.drawable.bg)


    var isExpanded by remember { mutableStateOf(isExpanded) }
    val transition = updateTransition(targetState = isExpanded, label = "expandableTransition")

    val cardWidth by transition.animateDp(
        transitionSpec = { tween1 },
        label = "") {
        if (it) 1200.dp else 130.dp
    }

//    val cardWidth by animateDpAsState(
//        targetValue = if (isExpanded) 1200.dp else 150.dp,
//        label = "widthTransition"
//    ) {
//
//    }

    val cardHeight by transition.animateDp(
        transitionSpec = { tween1 },
        label = "") {
        if (it) 280.dp else 64.dp
    }

    val cardElevation by animateDpAsState(
        targetValue = if (isExpanded) 4.dp else 2.dp, label = "elevationTransition"
    )

    val cardBackgroundColor by animateColorAsState(
        targetValue = if (isExpanded) Color(0xFF2187DB) else Color(0xFFB45656),
        label = "colorTransition"
    )
//
//    val contentColor by transition.animateColor(
//        transitionSpec = { tween1 },
//        label = "contentColorTransition"
//    ) { state ->
//        if (state) Color(0xFF1976D2) else Color(0xFF757575) // Adjust colors to match your design
//    }
//
//    val contentPadding by transition.animateDp(
//        transitionSpec = { tween1 },
//        label = "contentPaddingTransition"
//    ) { state ->
//        if (state) 16.dp else 8.dp // Adjust padding to match your design
//    }

    Log.d("--Hisham--", "cardWidth: $cardWidth")
    Log.d("--Hisham--", "cardHeight: $cardHeight")

    //Box(modifier = Modifier.fillMaxWidth()) {
    Card(modifier = Modifier
//        .wrapContentSize()
        .width(cardWidth)
        .height(cardHeight)
        .clickable {
            isExpanded = !isExpanded
        }
        .padding(if (isExpanded) 0.dp else 12.dp)
//        .animateContentSize(animationSpec = tween3)
////                .align(Alignment.Center)
        ,
        elevation = cardElevation,
        shape = RoundedCornerShape(24.dp),
        backgroundColor = cardBackgroundColor) {
        Column {

            TopRow(
                modifier = Modifier,
                isExpanded = isExpanded,
                transition = transition
            ) {
                isExpanded = false
            }

            MiddleCard(
                modifier = Modifier.padding(horizontal = 12.dp, vertical = 16.dp),
                isExpanded = isExpanded,
                transition = transition
            )

            if (isExpanded) {
                Divider(
                    thickness = 4.dp,
                    modifier = Modifier
                        .padding(bottom = 16.dp)
                        .width(32.dp)
                        .background(color = Color.White, shape = RoundedCornerShape(16.dp))
                        .align(Alignment.CenterHorizontally)
                )
            }
        }
    }
    //}
}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun TopRow(
    modifier: Modifier = Modifier,
    isExpanded: Boolean,
    transition: Transition<Boolean> = updateTransition(targetState = isExpanded, label = "expandableTransition"),
    crossClicked: () -> Unit,
) {

    val iconSize by transition.animateDp(label = "", transitionSpec = {
        tween1
    }) {
        if (it) 36.dp else 24.dp
    }

    // Animate a float value and map it to TextUnit for font size
    val textSize by transition.animateFloat(label = "FontSize", transitionSpec = {
        tween2
    }) { state ->
        if (state) 24f else 16f // Define the font sizes
    }

    val paddingIconLeft by transition.animateDp(label = "", transitionSpec = {
        spring()
    }) {
        if (it) 32.dp else 0.dp
    }

    val spacerBetweenTextAndIcon by transition.animateDp(label = "", transitionSpec = {
        spring()
    }) {
        if (it) 16.dp else 8.dp
    }


    val modifier = if (isExpanded) modifier.fillMaxWidth() else modifier.wrapContentSize()

    Row(
        modifier = modifier
            .padding(horizontal = 8.dp, vertical = 8.dp)
        //    .animateContentSize()
        ,
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row {
            Spacer(Modifier.width(paddingIconLeft))
            Icon(
                imageVector = Icons.Default.Place, // Use your icon here
                contentDescription = "Icon",
                modifier = Modifier.size(iconSize),
                tint = Color(0xFF2B199F)
            )
            Spacer(Modifier.width(spacerBetweenTextAndIcon))
            Text(
                text = "For you",
                color = Color.Black,
                fontWeight = FontWeight.Bold,
                fontSize = textSize.sp,
            )
        }
//        transition.AnimatedVisibility(visible = { it },
//            exit = fadeOut(tween2)
//        ) {
        if (isExpanded) {
            IconButton(
                onClick = crossClicked, modifier = Modifier.align(Alignment.Top)
            ) {
                Icon(
                    imageVector = Icons.Default.Close,
                    contentDescription = "Close",
                    tint = Color.Red
                )
            }
        }
//        }
    }


}

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun MiddleCard(modifier: Modifier = Modifier, isExpanded: Boolean, transition: Transition<Boolean> = updateTransition(targetState = isExpanded, label = "expandableTransition"), ) {
    // Additional content in the expanded state can go here
    transition.AnimatedVisibility(visible = {
        it
    },
        enter = fadeIn(tween2),
        exit = fadeOut(tween2)) {

        Box(
            modifier = modifier
//                .padding(horizontal = 8.dp, vertical = 60.dp)
                //.paint(backgroundImage, contentScale = ContentScale.FillWidth)
                .background(
                    color = Color(0xFF2B199F), //Color.Unspecified,
                    shape = RoundedCornerShape(24.dp)
                )
                .fillMaxWidth()
                .height(120.dp),

            ) {
            Text(
                text = "How to \nboost your\npension",
                color = Color.White,
                fontWeight = FontWeight.Bold,
                fontSize = 18.sp,
                modifier = Modifier
                    .padding(vertical = 16.dp, horizontal = 24.dp)
                    .align(Alignment.CenterStart)
            )
//                        Image(
//                            painter = painterResource(R.drawable.bg),
//                            contentDescription = "",
//                            contentScale = ContentScale.FillWidth,
//                            modifier = Modifier.size(320.dp).align(Alignment.Center)
//                        )
            Box(
//                            onClick = { /* Handle learn more action */ },
                modifier = Modifier
                    .wrapContentSize()
                    .padding(bottom = 32.dp, end = 24.dp)
                    .background(
                        color = Color(0xFF9A92CE), shape = RoundedCornerShape(48.dp)
                    )
                    .padding(vertical = 4.dp, horizontal = 8.dp)
                    .align(Alignment.BottomEnd)
            ) {
                Text("2 mins", fontSize = 12.sp)
            }


        }
    }
}

@Preview(showBackground = true)
@Composable
private fun TopRowPreview() {
    TopRow(isExpanded = true, crossClicked = {

    })
}

@Preview(showBackground = true)
@Composable
private fun TopRowPreviewSmall() {
    TopRow(isExpanded = false, crossClicked = {

    })
}

@Preview(showBackground = true)
@Composable
fun ExpandableViewPreviewFalse() {
    ExpandableView()
}

@Preview(showBackground = true)
@Composable
fun ExpandableViewPreview() {
    ExpandableView(true)
}

@Preview(showBackground = true)
@Composable
fun MiddleCardViewPreview() {
    MiddleCard(isExpanded = true)
}
