import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.tween
import androidx.compose.animation.core.updateTransition
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Divider
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Place
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

val tween = tween<Float>(1000)

@Composable
fun ExactAnim(modifier: Modifier = Modifier) {
    Surface {
        var isExpanded by remember { mutableStateOf(false) }
        val transition = updateTransition(targetState = isExpanded, label = "Expansion")

        val deviceWidth = LocalConfiguration.current.screenWidthDp

        val iconScale by transition.animateFloat(transitionSpec = { tween }, label = "IconScale") {
            if (it) 1.5f else 1f
        }
        val iconTranslationX by transition.animateFloat(
            transitionSpec = { tween }, label = "IconTranslationX"
        ) {
            if (it) -300f else 0f
        }
        val iconTranslationY by transition.animateFloat(
            transitionSpec = { tween }, label = "IconTranslationY"
        ) {
            if (it) 40f else 0f
        }

        val textScale by transition.animateFloat(transitionSpec = { tween }, label = "TextScale") {
            if (it) 1.5f else 1f
        }
        val textTranslationX by transition.animateFloat(
            transitionSpec = { tween }, label = "TextTranslationX"
        ) {
            if (it) -300f else 0f
        }
        val textTranslationY by transition.animateFloat(
            transitionSpec = { tween }, label = "TextTranslationX"
        ) {
            if (it) 40f else 0f
        }

        Box {

            if (isExpanded) {
                IconButton(
                    onClick = { isExpanded = !isExpanded },
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(top = 16.dp, end = 16.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Close,
                        contentDescription = "Close",
                        tint = Color.Red
                    )
                }
            }

            Column {


                Row(
                    modifier = modifier
                        .fillMaxWidth()
                        // .background(color = Color(0xFFBE2222))
                        .padding(horizontal = 8.dp, vertical = 8.dp)
                        .graphicsLayer(shape = RoundedCornerShape(32.dp))
                        .clickable { isExpanded = !isExpanded },
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.Top
                ) {
                    Row {
                        Spacer(Modifier.width(8.dp))
                        Icon(
                            imageVector = Icons.Default.Place,
                            contentDescription = "Icon",
                            modifier = Modifier
                                .size(32.dp)
                                .graphicsLayer {
                                    scaleX = iconScale
                                    scaleY = iconScale
                                    translationX = iconTranslationX
                                    translationY = iconTranslationY
                                },
                            tint = Color(0xFF2B199F)
                        )
                        Spacer(Modifier.width(8.dp))
                        Text(text = "For you",
                            color = Color.Black,
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp * textScale,
                            modifier = Modifier.graphicsLayer {
                                translationX = textTranslationX
                                translationY = textTranslationY
                            })
                    }
                }
                MiddleCard(
                    isExpanded = isExpanded,
                    modifier = Modifier.padding(horizontal = 12.dp, vertical = 24.dp),
                )
                if (isExpanded) {
                    Divider(
                        thickness = 4.dp,
                        modifier = Modifier
                            .padding(bottom = 16.dp)
                            .width(32.dp)
                            .background(color = Color.White, shape = RoundedCornerShape(16.dp))
                            .align(Alignment.CenterHorizontally)
                    )
                }
            }

        }
    }
}

@Preview(showBackground = true)
@Composable
private fun TopRowPreview() {
    ExactAnim()
}


